const assert = require('assert');
const mongoose = require('mongoose');
const moment = require('moment');

const getRandomInRange = (from, to, fixed = 5) => {
  return (Math.random() * (to - from) + from).toFixed(fixed) * 1;
  // .toFixed() returns string, so ' * 1' is a trick to convert to number
};

describe('Creating records', () => {
  // it('test stuff ', async (done) => {
  //   assert(1 === 1);
  //   const UserModel = mongoose.model('UserModel');
  //   const findpeople = await UserModel.findOneAndUpdate(
  //     {
  //       _id: { $in: ['5d532b53de8b1605049ed148'] },
  //     },
  //     { $pull: { _postedBidsRef: { $in: ['5d5389c9ebcf2c272414317a'] } } }
  //   )
  //     .lean()
  //     .exec();
  //   console.log(findpeople);
  //   done();
  // });

  it('create jobs ', async (done) => {const { jobDataAccess } = require('../data-access/jobDataAccess');

  const UserModel = mongoose.model('UserModel');
  try {
    const findpeople = await UserModel.find()
      .lean()
      .exec();

    if (findpeople.length > 0) {
      const { _id: ownerId } = findpeople[0];
      console.error(ownerId);

      try {
        for (let i = 0; i < 1; i++) {
          const { _id } = await jobDataAccess.addAJob(
            {
              detailedDescription: `${i} - generated by test, generated by test`,
              location: {
                type: 'Point',
                coordinates: [getRandomInRange(-150, 150), getRandomInRange(-80, 80)],
              },
              startingDateAndTime: new moment()
                .add(Math.floor(Math.random() * 25) + 1, 'days')
                .toISOString(),
              addressText: `Windsor Arms Apartments, ${getRandomInRange(
                10,
                300
              )} Argyle Ave, Ottawa, ON K2P 1B7, Canada`,
              templateId: 'bdbHouseCleaning',
              extras: {
                timeOfDay: 'evening',
                effort: 'medium',
              },
              taskImages: [],
            },
            ownerId
          );
          assert(!!_id);
          console.error(_id);

        }
        done();
      } catch (e) {
        console.error(e);

        done(e);
      }
    }

    done();
  } catch (e) {
    done(e);
  }
    // assert(1 === 1);
    // done();


  });
});
