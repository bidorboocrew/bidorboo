const assert = require('assert');
const moment = require('moment');

const getRandomInRange = (from, to, fixed = 5) => {
  return (Math.random() * (to - from) + from).toFixed(fixed) * 1;
};

describe('Creating records', () => {
  // it('create new user ', async (done) => {
  //   const userDataAccess = require('../data-access/userDataAccess');

  //   const userDetails = {
  //     displayName: `tests-${new Date().getTime()}`,
  //     userId: 'test@testtest123.com',
  //     email: { emailAddress: 'test@testtest123.com', isVerified: true },
  //     profileImage: {
  //       url:
  //         'https://res.cloudinary.com/hr6bwgs1p/image/upload/v1565728175/android-chrome-512x512.png',
  //     },
  //   };

  //   try {
  //     const { _id } = await userDataAccess.createNewUser(userDetails);
  //     assert(_id !== null, 'new user was created successfully');
  //     done();
  //   } catch (e) {
  //     console.error(e);
  //     assert(1 === 2, 'failed to create new user');
  //     done();
  //   }
  // });

  // it('find user ', async (done) => {
  //   try {
  //     const userDataAccess = require('../data-access/userDataAccess');

  //     const { userId } = await userDataAccess.findOneByUserId('test@testtest123.com');
  //     assert(userId === 'test@testtest123.com', 'delete user');
  //     done();
  //   } catch (e) {
  //     console.error(e);
  //     assert(1 === 2, 'failed to find new user');
  //     done(e);
  //   }
  // });

  // it('delete user ', async (done) => {
  //   try {
  //     const userDataAccess = require('../data-access/userDataAccess');

  //     const { userId } = await userDataAccess.findOneByUserId('test@testtest123.com');
  //     assert(userId === 'test@testtest123.com', 'delete user');

  //     // const { userId } = await userDataAccess.de('test@testtest123.com');
  //     assert(userId === 'test@testtest123.com', 'delete user');

  //     done();
  //   } catch (e) {
  //     console.error(e);
  //     assert(1 === 2, 'failed to delete user');
  //     done(e);
  //   }
  // });

  it('search jobs', async (done) => {
    try {
      const { jobDataAccess } = require('../data-access/jobDataAccess');
      console.log('search jobs start');
      const searchResults = await jobDataAccess.getJobsNear({
        location: { lat: 45.36829, lng: -75.618 },
        searchRadius: '150',
      });
      console.log('search jobs');
      console.log(searchResults);

      done();
    } catch (e) {
      console.log('search jobs');
      console.error(e);
      assert(1 === 2, 'failed to delete user');
      done(e);
    }
  });
});

// it('test stuff ', async (done) => {
//   assert(1 === 1);
//   const UserModel = mongoose.model('UserModel');
//   const findpeople = await UserModel.findOneAndUpdate(
//     {
//       _id: { $in: ['5d532b53de8b1605049ed148'] },
//     },
//     { $pull: { _postedBidsRef: { $in: ['5d5389c9ebcf2c272414317a'] } } }
//   )
//     .lean()
//     .exec();
//   console.log(findpeople);
//   done();
// });

// it('create jobs ', async (done) => {
//   const { jobDataAccess } = require('../data-access/jobDataAccess');

// const UserModel = mongoose.model('UserModel');
// try {
//   const findpeople = await UserModel.find()
//     .lean()
//     .exec();

//   if (findpeople.length > 0) {
//     const { _id: ownerId } = findpeople[0];
//     console.error(ownerId);

//     try {
//       for (let i = 0; i < 1; i++) {
//         const { _id } = await jobDataAccess.addAJob(
//           {
//             detailedDescription: `${i} - generated by test, generated by test`,
//             location: {
//               type: 'Point',
//               coordinates: [getRandomInRange(-150, 150), getRandomInRange(-80, 80)],
//             },
//             startingDateAndTime: new moment()
//               .add(Math.floor(Math.random() * 25) + 1, 'days')
//               .toISOString(),
//             addressText: `Windsor Arms Apartments, ${getRandomInRange(
//               10,
//               300
//             )} Argyle Ave, Ottawa, ON K2P 1B7, Canada`,
//             templateId: 'bdbHouseCleaning',
//             extras: {
//               timeOfDay: 'evening',
//               effort: 'medium',
//             },
//             taskImages: [],
//           },
//           ownerId
//         );
//         assert(!!_id);
//         console.error(_id);

//       }
//       done();
//     } catch (e) {
//       console.error(e);

//       done(e);
//     }
//   }

//   done();
// } catch (e) {
//   done(e);
// }
//   assert(1 === 1);
//   done();
// });
