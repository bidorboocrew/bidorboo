const mongoose = require('mongoose');
const GeoJSON = require('mongoose-geojson-schema');
const mongooseLeanVirtuals = require('mongoose-lean-virtuals');

const { Schema } = mongoose;

const StatsSchema = {
  minbid: Number, // in the future make it enum [ 'address field' , fone number ... date ..etc]
  avg: Number,
  max: Number,
  recommended: String, //reference to the ideal bid which is =  $bid amount /bidder's rating
};

const MAX_ADDRESS_LENGTH = 300;

const JobSchema = new Schema(
  {
    _ownerRef: { type: Schema.Types.ObjectId, ref: 'UserModel', required: true },
    _bidsListRef: [{ type: Schema.Types.ObjectId, ref: 'BidModel' }],
    _awardedBidRef: {
      type: Schema.Types.ObjectId,
      ref: 'BidModel',
    },
    processedPayment: {
      chargeId: { type: String },
      amount: { type: Number },
      paymentId: { type: String },
      bidderPayout: { type: Number },
      platformCharge: { type: Number },
      proposerPaid: { type: Number },
      bidderStripeAcc: { type: String },
      refund: {
        amount: { type: Number },
        charge: { type: String },
        id: { type: String },
        status: { type: String },
      },
    },
    _reviewRef: { type: Schema.Types.ObjectId, ref: 'ReviewModel' },
    title: String,
    state: {
      type: String,
      default: 'OPEN',
      enum: [
        'OPEN',
        'AWARDED',
        'DISPUTED',
        'CANCELED',
        'AWARDED_CANCELED_BY_BIDDER',
        'AWARDED_CANCELED_BY_REQUESTER',
        'CANCELED_OPEN',
        'EXPIRED',
        'EXPIRED_AWARDED',
        'EXPIRED_OPEN',
        'DONE',
        'PAIDOUT',
        'RESCHEDULED_REQUEST',
        'RESCHEDULED_DENIED',
      ],
    },
    jobCompletion: {
      proposerConfirmed: { type: Boolean, default: false },
      bidderConfirmed: { type: Boolean, default: false },
      bidderDisputed: { type: Boolean, default: false },
      proposerDisputed: { type: Boolean, default: false },
    },
    reschedule: {
      newTime: { type: Date, required: true },
      byWhom: { type: String, enum: ['owner', 'bidder'] },
      status: { type: String, enum: ['denied', 'accepted'] },
    },
    hideFrom: [{ type: Schema.Types.ObjectId, ref: 'UserModel' }], //array of people who saw this/booed no longer wish to see it ..etc
    viewedBy: [{ type: Schema.Types.ObjectId, ref: 'UserModel' }],
    booedBy: [{ type: Schema.Types.ObjectId, ref: 'UserModel' }],
    detailedDescription: { type: String, trim: true },
    stats: StatsSchema,
    location: { type: mongoose.Schema.Types.Point, index: '2dsphere' },
    addressText: { type: String, trim: true, max: MAX_ADDRESS_LENGTH },
    startingDateAndTime: { type: Date, required: true },
    durationOfJob: { type: String, trim: true },
    fromTemplateId: { type: String, trim: true },
    reported: { type: Number },
    jobImages: {
      type: [
        {
          url: { type: String },
          public_id: { type: String },
        },
      ],
      validate: [(val) => val.length < 8, '{PATH} exceeds the limit of 8'],
    },
    customAttributes: { type: Object },
    extras: { type: Object },
  },
  { timestamps: true } // createdAt and updatedAt auto generated by mongoose
);

// JobSchema.pre('save', async function(next) {
//   if (this.startingDateAndTime && this.startingDateAndTime) {
//     this.startingDateAndTime = moment(
//       moment(this.startingDateAndTime).set({ hour: 0, minute: 0, second: 0, millisecond: 0 })
//     ).toISOString();
//   }
//   next();
// });

JobSchema.virtual('displayTitle').get(function() {
  const templateIdToDisplayNameMapper = {
    'bdbjob-house-cleaning': 'House Cleaning',
  };
  return templateIdToDisplayNameMapper[this.fromTemplateId];
});

JobSchema.virtual('displayStatus').get(function() {
  const templateIdToDisplayNameMapper = {
    OPEN: 'Waiting For Taskers',
    AWARDED: 'Assigned To Tasker',
    DISPUTED: 'Under Dispute',
    CANCELED: 'Cancelled',
    AWARDED_CANCELED_BY_BIDDER: 'Cancelled By Tasker',
    AWARDED_CANCELED_BY_REQUESTER: 'Cancelled By Requester',
    CANCELED_OPEN: 'Canceled',
    EXPIRED: 'Past Due',
    EXPIRED_AWARDED: 'Past Due',
    EXPIRED_OPEN: 'Past Due',
    DONE: 'Done',
    PAIDOUT: 'Paid Out',
  };
  return templateIdToDisplayNameMapper[this.state];
});

JobSchema.plugin(mongooseLeanVirtuals);

//no need for index on these . avoid performance slowness
mongoose.model('JobModel', JobSchema);
