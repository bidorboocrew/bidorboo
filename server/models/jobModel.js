const mongoose = require('mongoose');
const GeoJSON = require('mongoose-geojson-schema');
const moment = require('moment');
const { Schema } = mongoose;

const StatsSchema = {
  minbid: Number, // in the future make it enum [ 'address field' , fone number ... date ..etc]
  avg: Number,
  max: Number,
  recommended: String, //reference to the ideal bid which is =  $bid amount /bidder's rating
};

const DateTimeSchema = {
  date: Date,
  time: { type: String, trim: true, default: 'Flexible, any time' },
};
const MAX_ADDRESS_LENGTH = 300;

const JobSchema = new Schema(
  {
    _ownerRef: { type: Schema.Types.ObjectId, ref: 'UserModel', required: true },
    _bidsListRef: [{ type: Schema.Types.ObjectId, ref: 'BidModel' }],
    _awardedBidRef: {
      type: Schema.Types.ObjectId,
      ref: 'BidModel',
    },
    _reviewRef: { type: Schema.Types.ObjectId, ref: 'ReviewModel' },
    title: String,
    state: {
      type: String,
      default: 'OPEN',
      enum: ['OPEN', 'AWARDED', 'DONE', 'CANCELED', 'EXPIRED'],
    },
    hideFrom: [{ type: Schema.Types.ObjectId, ref: 'UserModel' }], //array of people who saw this/booed no longer wish to see it ..etc
    viewedBy: [{ type: Schema.Types.ObjectId, ref: 'UserModel' }],
    booedBy: [{ type: Schema.Types.ObjectId, ref: 'UserModel' }],
    detailedDescription: { type: String, trim: true },
    stats: StatsSchema,
    location: { type: mongoose.Schema.Types.Point, index: '2dsphere' },
    addressText: { type: String, trim: true, max: MAX_ADDRESS_LENGTH },
    startingDateAndTime: DateTimeSchema,
    durationOfJob: { type: String, trim: true },
    fromTemplateId: { type: String, trim: true },
    reported: { type: Number },
    jobImages: {
      type: [
        {
          url: { type: String },
          public_id: { type: String },
        },
      ],
      validate: [(val) => val.length < 8, '{PATH} exceeds the limit of 8'],
    },
    extras: { type: Object },
  },
  { timestamps: true } // createdAt and updatedAt auto generated by mongoose
);

JobSchema.pre('save', async function(next) {
  if (this.startingDateAndTime && this.startingDateAndTime.date) {
    this.startingDateAndTime.date = moment(
      moment(this.startingDateAndTime.date).set({ hour: 0, minute: 0, second: 0, millisecond: 0 })
    ).toISOString();
  }
  next();
});

//no need for index on these . avoid performance slowness
mongoose.model('JobModel', JobSchema);
