const mongoose = require('mongoose');
const { Schema } = mongoose;

const PropertySchema = new Schema({
  fieldType: String, // in the future make it enum [ 'address field' , fone number ... date ..etc]
  fieldValue: Object
});

const StatsSchema = new Schema({
  minbid: Number, // in the future make it enum [ 'address field' , fone number ... date ..etc]
  avg: Number,
  max: Number,
  recommended: String //reference to the ideal bid which is =  $bid amount /bidder's rating
});

const ReviewSchema = new Schema(
  {
    proposerReviewIsDone: { type: Boolean, default: false },
    bidderReviewIsDone: { type: Boolean, default: false }
  },
  { timestamps: true } // createdAt and updatedAt auto generated by mongoose
);

// _props are reference properties
const JobSchema = new Schema(
  {
    _ownerId: { type: Schema.Types.ObjectId, ref: 'UserModel' },
    _bidRefernce: {
      type: [{ type: Schema.Types.ObjectId, ref: 'BidModel' }],
      default: null
    },
    title: String,
    state: {
      type: String,
      enum: ['OPEN', 'AWARDED', 'DONE', 'CANCELED', 'REOPENED']
    },
    isSeen: { type: Boolean, default: false }, //will be used to highlight new jobs
    // properties: [PropertySchema], //list of props needed for a the template
    stats: StatsSchema,
    awardedBidder: {
      type: Schema.Types.ObjectId,
      ref: 'BidModel'
    },
    jobReview: ReviewSchema, //review for each job
    extras: { type: Object, default: null }
  },
  { timestamps: true } // createdAt and updatedAt auto generated by mongoose
);

mongoose.model('JobModel', JobSchema);
