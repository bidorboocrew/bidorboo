const GeoJSON = require('mongoose-geojson-schema');
const mongoose = require('mongoose');
const { Schema } = mongoose;

const PropertySchema = new Schema({
  fieldType: String, // in the future make it enum [ 'address field' , fone number ... date ..etc]
  fieldValue: Object
});

const StatsSchema = new Schema({
  minbid: Number, // in the future make it enum [ 'address field' , fone number ... date ..etc]
  avg: Number,
  max: Number,
  recommended: String //reference to the ideal bid which is =  $bid amount /bidder's rating
});

const ReviewSchema = new Schema(
  {
    proposerReviewIsDone: { type: Boolean, default: false },
    bidderReviewIsDone: { type: Boolean, default: false }
  },
  { timestamps: true } // createdAt and updatedAt auto generated by mongoose
);

// _props are reference properties
const JobSchema = new Schema(
  {
    _ownerId: { type: Schema.Types.ObjectId, ref: 'UserModel', required: true },
    _bidsList: [{ type: Schema.Types.ObjectId, ref: 'BidModel' }],
    title: String,
    state: {
      type: String,
      enum: ['OPEN', 'AWARDED', 'DONE', 'CANCELED', 'REOPENED']
    },
    whoSeenThis: [{type: Schema.Types.ObjectId, ref: 'UserModel'}], //array of people who saw this
    properties: [PropertySchema], //list of props needed for a the template
    detailedDescription:{type:String,required:true, trim:true},
    stats: StatsSchema,
    awardedBidder: {
      type: Schema.Types.ObjectId,
      ref: 'BidModel'
    },
    jobReview: ReviewSchema, //review for each job
    extras: { type: Object, default: null },
    // this is how you create address
    //  point: {
    //   type: "Point",
    //   coordinates: [12.123456, 13.134578]
    // },
    location: { type: mongoose.Schema.Types.Point, index: '2dsphere' }
  },
  { timestamps: true } // createdAt and updatedAt auto generated by mongoose
);

//no need for index on these . avoid performance slowness
mongoose.model('JobModel', JobSchema);
