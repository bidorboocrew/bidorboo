const mongoose = require('mongoose');
const { Schema } = mongoose;
const mongooseLeanVirtuals = require('mongoose-lean-virtuals');

const MIN_BID_AMOUNT = 10;
const MAX_BID_AMOUNT = 5000;
const BidSchema = new Schema(
  {
    _bidderRef: {
      type: Schema.Types.ObjectId,
      ref: 'UserModel',
      required: true,
    },
    _jobRef: { type: Schema.Types.ObjectId, ref: 'JobModel', required: true }, //we will use this to reference the job
    state: {
      type: String,
      index: true,
      enum: [
        'OPEN',
        'AWARDED', // when Tasker is awarded
        'AWARDED_SEEN', // when tasker seen the awarded bid
        'DISPUTED', // disputed task
        'AWARDED_BID_CANCELED_BY_TASKER',
        'AWARDED_BID_CANCELED_BY_REQUESTER',
        'DONE', // when Requester confirms job is done
        'PAYMENT_RELEASED',
        'PAYMENT_TO_BANK_FAILED',
        'ARCHIVE', //For historical record
      ],
      default: 'OPEN',
    },
    isNewBid: { type: Boolean, default: true }, // will be used to highlight unseen bids
    bidAmount: {
      value: {
        type: Number,
        required: true,
        validate: {
          validator: (bid) => bid >= MIN_BID_AMOUNT && bid <= MAX_BID_AMOUNT,
          message: 'Minimum bid amount is ' + MIN_BID_AMOUNT + ' and maximum is ' + MAX_BID_AMOUNT,
        },
      },
      currency: {
        type: String,
        enum: ['CAD', 'USD'],
        default: 'CAD',
      },
    }, //dolar amount
  },
  { timestamps: true } // createdAt and updatedAt auto  generated by mongoose
);

BidSchema.virtual('displayStatus').get(function() {
  const stateToDisplayName = {
    OPEN: 'Awaiting On Requester',
    AWARDED: 'Winning Bid', // when Tasker is awarded
    AWARDED_SEEN: 'Winning Bid', // when tasker seen the awarded bid
    DISPUTED: 'Dispute', // disputed task
    AWARDED_BID_CANCELED_BY_TASKER: 'Tasker Cancelled the Agreement',
    AWARDED_BID_CANCELED_BY_REQUESTER: 'Requester Cancelled the Agreement',
    DONE: 'Task is Completed', // when Requester confirms job is done
    PAYMENT_RELEASED: 'Payment released to bank',
    PAYMENT_TO_BANK_FAILED: 'Payout to bank failed',
    ARCHIVE: 'Archived', //For historical record
  };
  return stateToDisplayName[this.state];
});
BidSchema.plugin(mongooseLeanVirtuals);

const cleanUpOnDeleteJob = function(next) {
  const UserModel = mongoose.model('UserModel');
  UserModel.findByIdAndUpdate(this._bidderRef, {
    $pull: { _postedBidsRef: { $eq: this._id } },
  }).then(() => next());
};

BidSchema.pre('remove', cleanUpOnDeleteJob);

//no need for index on these . avoid performance slowness
mongoose.model('BidModel', BidSchema);
