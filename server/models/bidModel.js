const mongoose = require('mongoose');
const { Schema } = mongoose;

const MIN_BID_AMOUNT = 20;
const MAX_BID_AMOUNT = 2000;
const BidSchema = new Schema(
  {
    _taskerRef: {
      type: Schema.Types.ObjectId,
      ref: 'UserModel',
      required: true,
    },
    _requestRef: { type: Schema.Types.ObjectId, ref: 'RequestModel', required: true }, //we will use this to reference the request
    isNewBid: { type: Boolean, default: true }, // will be used to highlight unseen bids
    bidAmount: {
      value: {
        type: Number,
        validate: {
          validator: (bid) => bid >= MIN_BID_AMOUNT && bid <= MAX_BID_AMOUNT,
          message: 'Minimum bid amount is ' + MIN_BID_AMOUNT + ' and maximum is ' + MAX_BID_AMOUNT,
        },
        required: true,
      },
      currency: {
        type: String,
        enum: ['CAD', 'USD'],
        default: 'CAD',
        required: true,
      },
    },
    requesterPayment: {
      value: {
        type: Number,
        required: true,
      },
      currency: {
        type: String,
        enum: ['CAD', 'USD'],
        default: 'CAD',
        required: true,
      },
    },
    requesterPartialRefund: {
      value: {
        type: Number,
        required: true,
      },
      currency: {
        type: String,
        enum: ['CAD', 'USD'],
        default: 'CAD',
        required: true,
      },
    },
    taskerPayout: {
      value: {
        type: Number,
        required: true,
      },
      currency: {
        type: String,
        enum: ['CAD', 'USD'],
        default: 'CAD',
        required: true,
      },
    },
    taskerPartialPayout: {
      value: {
        type: Number,
        required: true,
      },
      currency: {
        type: String,
        enum: ['CAD', 'USD'],
        default: 'CAD',
        required: true,
      },
    },
    taskerActualPayoutInBank: {
      value: {
        type: Number,
        required: true,
      },
      currency: {
        type: String,
        enum: ['CAD', 'USD'],
        default: 'CAD',
        required: true,
      },
    },
  },

  { timestamps: true } // createdAt and updatedAt auto  generated by mongoose
);

const cleanUpOnDeleteRequest = function(next) {
  const UserModel = mongoose.model('UserModel');
  UserModel.findByIdAndUpdate(this._taskerRef, {
    $pull: { _postedBidsRef: { $eq: this._id } },
  }).then(() => next());
};

BidSchema.pre('remove', cleanUpOnDeleteRequest);

mongoose.model('BidModel', BidSchema);
