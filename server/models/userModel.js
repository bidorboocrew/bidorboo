const mongoose = require('mongoose');
const { Schema } = mongoose;
require('mongoose-type-email');

const ProviderSchema = new Schema({
  name: String, //google
  id: String, //googleid
  email: mongoose.SchemaTypes.Email //email
});

//should be flexible in the future to accomodate global address patterns
const AddressSchema = new Schema({
  street: String,
  unit: String,
  city: String,
  province: String,
  state: String,
  postalCode: String,
  country: String,
  extras: String //to handle unique addresses
});

const CreditCardSchema = new Schema({
  number: String,
  type: String
});

const UserSchema = new Schema(
  {
    _postedJobs: [{ type: Schema.Types.ObjectId, ref: 'JobModel' }], //list of all jobs you have posted
    _postedBids: [{ type: Schema.Types.ObjectId, ref: 'BidModel' }], // list of all bids you made
    _reviews: [{ type: Schema.Types.ObjectId, ref: 'ReviewModel' }], //ref to reviews
    userId: {
      type: String,
      required: true,
      unique: true,
      lowercase: true,
      trim: true,
      index: true
    },
    email: {
      type: mongoose.SchemaTypes.Email,
      required: true,
      unique: true,
      lowercase: true,
      trim: true,
      index: true
    },
    displayName: String,
    phoneNumber: String,
    password: String,
    creditCards: [CreditCardSchema], // we will only store the credit cardS number (not expiry nor cvv)
    provider: [ProviderSchema],
    profileImgUrl: { type: String, default: 'https://goo.gl/92gqPL' },
    address: AddressSchema,
    globalRating: Number, // 1-5 stars
    skills: [String], // list of strings representing their skills
    personalParagraph: String, // a blob about who they are
    paymentRefs: [String], // ID to fetch their payments through our system to generate an invoice
    membershipStatus: {
      type: String,
      enum: [
        'NEW_MEMBER',
        'BASIC_MEMBER',
        'BRONZE_MEMBER',
        'SILVER_MEMBER',
        'GOLDEN_MEMBER',
        'PLATINUM_MEMBER'
      ]
    }, // some challenges like the idea of super host
    extras: Object, // this is a place holder for us to add more analytics
    // read and apply this later http://devsmash.com/blog/implementing-max-login-attempts-with-mongoose
    loginAttempts: { type: Number, required: true, default: 0 }, //to prevent hackers
    lockUntil: { type: Number }
  },
  { timestamps: true } // createdAt and updatedAt auto  generated by mongoose
);

mongoose.model('UserModel', UserSchema);
